/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.stopwatch.v0.stopwatch;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class StopwatchStatemachine implements IStopwatchStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean rBt;
		
		
		public void raiseRBt() {
			synchronized(StopwatchStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							rBt = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean lBt;
		
		
		public void raiseLBt() {
			synchronized(StopwatchStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							lBt = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doInitial;
		
		
		public boolean isRaisedDoInitial() {
			synchronized(StopwatchStatemachine.this) {
				return doInitial;
			}
		}
		
		protected void raiseDoInitial() {
			synchronized(StopwatchStatemachine.this) {
				doInitial = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoInitialRaised();
				}
			}
		}
		
		private boolean doStart;
		
		
		public boolean isRaisedDoStart() {
			synchronized(StopwatchStatemachine.this) {
				return doStart;
			}
		}
		
		protected void raiseDoStart() {
			synchronized(StopwatchStatemachine.this) {
				doStart = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoStartRaised();
				}
			}
		}
		
		private boolean doPause;
		
		
		public boolean isRaisedDoPause() {
			synchronized(StopwatchStatemachine.this) {
				return doPause;
			}
		}
		
		protected void raiseDoPause() {
			synchronized(StopwatchStatemachine.this) {
				doPause = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPauseRaised();
				}
			}
		}
		
		private boolean doResume;
		
		
		public boolean isRaisedDoResume() {
			synchronized(StopwatchStatemachine.this) {
				return doResume;
			}
		}
		
		protected void raiseDoResume() {
			synchronized(StopwatchStatemachine.this) {
				doResume = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResumeRaised();
				}
			}
		}
		
		private boolean doStop;
		
		
		public boolean isRaisedDoStop() {
			synchronized(StopwatchStatemachine.this) {
				return doStop;
			}
		}
		
		protected void raiseDoStop() {
			synchronized(StopwatchStatemachine.this) {
				doStop = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoStopRaised();
				}
			}
		}
		
		protected void clearEvents() {
			rBt = false;
			lBt = false;
		}
		protected void clearOutEvents() {
		
		doInitial = false;
		doStart = false;
		doPause = false;
		doResume = false;
		doStop = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_StateStart,
		main_region_StatePause,
		main_region_StateStop,
		main_region_StateInitial,
		main_region_StateResume,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public StopwatchStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_StateStart:
				main_region_StateStart_react(true);
				break;
			case main_region_StatePause:
				main_region_StatePause_react(true);
				break;
			case main_region_StateStop:
				main_region_StateStop_react(true);
				break;
			case main_region_StateInitial:
				main_region_StateInitial_react(true);
				break;
			case main_region_StateResume:
				main_region_StateResume_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_StateStart:
			return stateVector[0] == State.main_region_StateStart;
		case main_region_StatePause:
			return stateVector[0] == State.main_region_StatePause;
		case main_region_StateStop:
			return stateVector[0] == State.main_region_StateStop;
		case main_region_StateInitial:
			return stateVector[0] == State.main_region_StateInitial;
		case main_region_StateResume:
			return stateVector[0] == State.main_region_StateResume;
		default:
			return false;
		}
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseRBt() {
		sCInterface.raiseRBt();
	}
	
	public synchronized void raiseLBt() {
		sCInterface.raiseLBt();
	}
	
	public synchronized boolean isRaisedDoInitial() {
		return sCInterface.isRaisedDoInitial();
	}
	
	public synchronized boolean isRaisedDoStart() {
		return sCInterface.isRaisedDoStart();
	}
	
	public synchronized boolean isRaisedDoPause() {
		return sCInterface.isRaisedDoPause();
	}
	
	public synchronized boolean isRaisedDoResume() {
		return sCInterface.isRaisedDoResume();
	}
	
	public synchronized boolean isRaisedDoStop() {
		return sCInterface.isRaisedDoStop();
	}
	
	/* Entry action for state 'StateStart'. */
	private void entryAction_main_region_StateStart() {
		sCInterface.raiseDoStart();
	}
	
	/* Entry action for state 'StatePause'. */
	private void entryAction_main_region_StatePause() {
		sCInterface.raiseDoPause();
	}
	
	/* Entry action for state 'StateStop'. */
	private void entryAction_main_region_StateStop() {
		sCInterface.raiseDoStop();
	}
	
	/* Entry action for state 'StateInitial'. */
	private void entryAction_main_region_StateInitial() {
		sCInterface.raiseDoInitial();
	}
	
	/* Entry action for state 'StateResume'. */
	private void entryAction_main_region_StateResume() {
		sCInterface.raiseDoResume();
	}
	
	/* 'default' enter sequence for state StateStart */
	private void enterSequence_main_region_StateStart_default() {
		entryAction_main_region_StateStart();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateStart;
	}
	
	/* 'default' enter sequence for state StatePause */
	private void enterSequence_main_region_StatePause_default() {
		entryAction_main_region_StatePause();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StatePause;
	}
	
	/* 'default' enter sequence for state StateStop */
	private void enterSequence_main_region_StateStop_default() {
		entryAction_main_region_StateStop();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateStop;
	}
	
	/* 'default' enter sequence for state StateInitial */
	private void enterSequence_main_region_StateInitial_default() {
		entryAction_main_region_StateInitial();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateInitial;
	}
	
	/* 'default' enter sequence for state StateResume */
	private void enterSequence_main_region_StateResume_default() {
		entryAction_main_region_StateResume();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateResume;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateStart */
	private void exitSequence_main_region_StateStart() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state StatePause */
	private void exitSequence_main_region_StatePause() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state StateStop */
	private void exitSequence_main_region_StateStop() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state StateInitial */
	private void exitSequence_main_region_StateInitial() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state StateResume */
	private void exitSequence_main_region_StateResume() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_StateStart:
			exitSequence_main_region_StateStart();
			break;
		case main_region_StatePause:
			exitSequence_main_region_StatePause();
			break;
		case main_region_StateStop:
			exitSequence_main_region_StateStop();
			break;
		case main_region_StateInitial:
			exitSequence_main_region_StateInitial();
			break;
		case main_region_StateResume:
			exitSequence_main_region_StateResume();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateInitial_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateStart_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.rBt) {
				exitSequence_main_region_StateStart();
				enterSequence_main_region_StatePause_default();
				react();
			} else {
				if (sCInterface.lBt) {
					exitSequence_main_region_StateStart();
					enterSequence_main_region_StateStop_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_StatePause_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.lBt) {
				exitSequence_main_region_StatePause();
				enterSequence_main_region_StateStop_default();
				react();
			} else {
				if (sCInterface.rBt) {
					exitSequence_main_region_StatePause();
					enterSequence_main_region_StateResume_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_StateStop_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.lBt) {
				exitSequence_main_region_StateStop();
				enterSequence_main_region_StateInitial_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_StateInitial_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.lBt) {
				exitSequence_main_region_StateInitial();
				enterSequence_main_region_StateStart_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_StateResume_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.lBt) {
				exitSequence_main_region_StateResume();
				enterSequence_main_region_StateStop_default();
				react();
			} else {
				if (sCInterface.rBt) {
					exitSequence_main_region_StateResume();
					enterSequence_main_region_StatePause_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
